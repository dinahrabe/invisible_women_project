get_tags <- function(x){
list(my_tags = x$name)
}
# apply the function to the reduced json
tags_list <- lapply(json_tags, get_tags)
# create a dataframe of the tag names with the id of the element (needed for matching with other dataframes at the end)
df_tags <- dplyr::bind_rows(tags_list,.id = "id")
##### GET THE TITLES #######
# get the titles in a dataframe
df_titles <- as.data.frame(json_list[[i]]$result$title)
# change column name
colnames(df_titles)[1] <- "titles"
# add an id column
df_titles <- tibble::rowid_to_column(df_titles, "id")
##### GET THE GROUPS #####
# reduce the json to the list of groups
json_groups <- json_list[[i]]$result$groups
# function to get the names of the groups
get_groups <- function(x){
list(my_groups = x$display_name)
}
# apply the function to the reduced json
groups_list <- lapply(json_groups, get_groups)
# transform empty values, if there are any, into NA to keep them
groups_list <- lapply(groups_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the groups names with the id of the element (needed for matching with other dataframes at the end)
df_groups <- plyr::rbind.fill(lapply(groups_list, as.data.frame))
df_groups <- tibble::rowid_to_column(df_groups, "id")
##### GET THE DESCRIPTION #####
# get the descriptions in a dataframe
df_description <- as.data.frame(json_list[[i]]$result$notes)
# change column name
colnames(df_description)[1] <- "description"
# add an id column
df_description <- tibble::rowid_to_column(df_description, "id")
## binding the dataframes together
assign('c_results',setNames(data.frame(matrix(ncol = 5,nrow = 1000)),c('id','title','description','tags','groups')))
## add ID
c_results$id <- unique(df_titles$id)
# add tags
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
}
c_results
## add titles
#summarise(group_by(id), alltogether = paste(my_tags))
## add descriptions
}
View(test_df)
View(df_groups)
df_tags$new_tags <- df_tags %>%
summarise(group_by(id), alltogether = paste(my_tags))
library(tidyverse)
df_tags$new_tags <- df_tags %>%
summarise(group_by(id), alltogether = paste(my_tags))
is.integer(df_tags$id)
as.integer(df_tags$id)
is.integer(df_tags$id)
is.numeric(df_tags$id)
as.numeric(df_tags$id)
is.numeric(df_tags$id)
df_tags$id <- as.numeric(df_tags$id)
is.numeric(df_tags$id)
df_tags$new_tags <- df_tags %>%
summarise(group_by(id), alltogether = paste(my_tags))
Sys.setenv(LANG = "en")
df_tags$new_tags <- df_tags %>%
summarise(group_by(id), alltogether = paste(my_tags))
View(df_titles)
View(df_description)
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'titles'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
}
View(c_results)
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
}
c_results
i=1
df_date <- as.data.frame(json_list[[i]]$result$metadata_created)
# change column name
colnames(df_date)[1] <- "metadata_created"
View(df_date)
typeof(df_date$metadata_created)
df_date$metadata_created <-  as.Date(substr(df_date$metadata_created,1,10))
typeof(df_date$metadata_created)
assign('c_results',setNames(data.frame(matrix(ncol = 6,nrow = 1000)),c('id','title','description','tags','groups','date')))
## add ID
c_results$id <- unique(df_titles$id)
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- df_tags[which(df_tags[,'id']==j),'my_tags']
}
assign('c_results',setNames(data.frame(matrix(ncol = 6,nrow = 1000)),c('id','title','description','tags','groups','date')))
## add ID
c_results$id <- unique(df_titles$id)
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- df_date[which(df_date[,'id']==j),'metadata_created']
}
View(c_results)
View(df_date)
df_date <- as.data.frame(json_list[[i]]$result$metadata_created)
# change column name
colnames(df_date)[1] <- "metadata_created"
# add id column
df_date <- tibble::rowid_to_column(df_date, "id")
# transform datatype to date
df_date$metadata_created <-  as.Date(substr(df_date$metadata_created,1,10))
assign('c_results',setNames(data.frame(matrix(ncol = 6,nrow = 1000)),c('id','title','description','tags','groups','date')))
## add ID
c_results$id <- unique(df_titles$id)
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- df_date[which(df_date[,'id']==j),'metadata_created']
}
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- as.Date(df_date[which(df_date[,'id']==j),'metadata_created'])
}
View(c_results)
typeof(c_results$date)
typeof(df_date$metadata_created)
View(df_date$metadata_created)
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- as.Date(df_date[which(df_date[,'id']==j),'metadata_created'])
}
View(c_results)
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- as.Date(df_date[which(df_date[,'id']==j),'metadata_created'],"%Y%m%d")
}
View(c_results)
install.packages('anytime')
library('anytime')
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- anydate(df_date[which(df_date[,'id']==j),'metadata_created'])
}
View(c_results)
c_results[,'date'] <- as.Date()
c_results[,'date'] <- as.Date(c_results[,'date'])
c_results[,'date'] <- as.Date(c_results[,'date'],origin = "1970-01-01")
df_tags %>%
summarise(group_by(id)
df_tags$new_tags <- df_tags %>%
summarise(group_by(id), alltogether = paste(my_tags))
df_tags$new_tags <- df_tags %>%
group_by(id) %>%
summarise(alltogether = paste(my_tags))
View(df_tags)
df_tags$new_tags <- df_tags %>%
summarise(group_by(id), alltogether = paste0(my_tags))
df_tags %>% summarise(group_by(id), alltogether = paste(my_tags))
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(jsonlite, tidyjson, httr, doParallel, foreach)
## set up parallel core use for getting the raw data
n_cores <- detectCores()-1
cl <- makeCluster(
n_cores,
type = 'PSOCK'
)
## write function to deregister the cores after use
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
## getting the meta data of all 55000 datasets
# Register cluster
registerDoParallel(cl)
# create empty list for json objects
x <- list()
# for loop to go over the urls and extend the limit each time and store the object in the json_list
# tryout with 1:5 objects - final version has to be with 1:55
json_list <- foreach(i=1:56,.packages = c('httr','jsonlite', 'tidyjson')) %dopar% {
endp_one <- "https://www.govdata.de/ckan/api/action/current_package_list_with_resources?limit=1000&offset="
endp_two <- as.character(1+1000*(i-1))
endp <- paste0(endp_one,endp_two)
resp <- GET(endp)
x <- fromJSON(content(resp, as = "text"))
}
# De-register cluster
registerDoSEQ()
unregister_dopar()
View(json_list)
## initialise two functions to get tags and groups
# function to get the names of the groups
get_groups <- function(x){
list(my_groups = x$display_name)
}
# function to get the names of the tags
get_tags <- function(x){
list(my_tags = x$name)
}
# De-register cluster
registerDoSEQ()
unregister_dopar()
# Register cluster
registerDoParallel(cl)
final_df <- foreach(i = 1:length(json_list), .combine = rbind,.packages = c('httr','jsonlite', 'tidyjson','tidyverse'))%dopar%{
##### GET THE TAGS #####
# reduce the json to the list of tags
json_tags <- json_list[[i]]$result$tags
# apply the function to the reduced json
tags_list <- lapply(json_tags, get_tags)
# transform empty values, if there are any, into NA to keep them
tags_list <- lapply(tags_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the tag names with the id of the element (needed for matching with other dataframes at the end)
df_tags <- dplyr::bind_rows(tags_list,.id = "id")
##### GET THE TITLES #######
# get the titles in a dataframe
df_titles <- as.data.frame(json_list[[i]]$result$title)
# change column name
colnames(df_titles)[1] <- "titles"
# add an id column
df_titles <- tibble::rowid_to_column(df_titles, "id")
##### GET THE GROUPS #####
# reduce the json to the list of groups
json_groups <- json_list[[i]]$result$groups
# apply the get_groups function to the reduced json
groups_list <- lapply(json_groups, get_groups)
# transform empty values, if there are any, into NA to keep them
groups_list <- lapply(groups_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the groups names with the id of the element (needed for matching with other dataframes at the end)
df_groups <- plyr::rbind.fill(lapply(groups_list, as.data.frame))
df_groups <- tibble::rowid_to_column(df_groups, "id")
##### GET THE DESCRIPTION #####
# get the descriptions in a dataframe
df_description <- as.data.frame(json_list[[i]]$result$notes)
# change column name
colnames(df_description)[1] <- "description"
# add an id column
df_description <- tibble::rowid_to_column(df_description, "id")
##### GET THE DATE - METADATA CREATED #####
# get the descriptions in a dataframe
df_date <- as.data.frame(json_list[[i]]$result$metadata_created)
# change column name
colnames(df_date)[1] <- "metadata_created"
# add id column
df_date <- tibble::rowid_to_column(df_date, "id")
# transform datatype to date
df_date$metadata_created <-  as.Date(substr(df_date$metadata_created,1,10))
##### BINDING DATAFRAMES TOGETHER #####
assign('c_results',setNames(data.frame(matrix(ncol = 6,nrow = 1000)),c('id','title','description','tags','groups','date')))
# add id column
c_results$id <- unique(df_titles$id)
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- df_date[which(df_date[,'id']==j),'metadata_created']
}
# transform date column
c_results[,'date'] <- as.Date(c_results[,'date'],origin = "1970-01-01")
c_results
}
# De-register cluster
registerDoSEQ()
unregister_dopar()
nrow(json_list[[55]])
nrow(json_list[[55]]$result)
# De-register cluster
registerDoSEQ()
unregister_dopar()
registerDoParallel(cl)
final_df <- foreach(i = 1:length(json_list), .combine = rbind,.packages = c('httr','jsonlite', 'tidyjson','tidyverse'))%dopar%{
##### GET THE TAGS #####
# reduce the json to the list of tags
json_tags <- json_list[[i]]$result$tags
# apply the function to the reduced json
tags_list <- lapply(json_tags, get_tags)
# transform empty values, if there are any, into NA to keep them
tags_list <- lapply(tags_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the tag names with the id of the element (needed for matching with other dataframes at the end)
df_tags <- dplyr::bind_rows(tags_list,.id = "id")
##### GET THE TITLES #######
# get the titles in a dataframe
df_titles <- as.data.frame(json_list[[i]]$result$title)
# change column name
colnames(df_titles)[1] <- "titles"
# add an id column
df_titles <- tibble::rowid_to_column(df_titles, "id")
##### GET THE GROUPS #####
# reduce the json to the list of groups
json_groups <- json_list[[i]]$result$groups
# apply the get_groups function to the reduced json
groups_list <- lapply(json_groups, get_groups)
# transform empty values, if there are any, into NA to keep them
groups_list <- lapply(groups_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the groups names with the id of the element (needed for matching with other dataframes at the end)
df_groups <- plyr::rbind.fill(lapply(groups_list, as.data.frame))
df_groups <- tibble::rowid_to_column(df_groups, "id")
##### GET THE DESCRIPTION #####
# get the descriptions in a dataframe
df_description <- as.data.frame(json_list[[i]]$result$notes)
# change column name
colnames(df_description)[1] <- "description"
# add an id column
df_description <- tibble::rowid_to_column(df_description, "id")
##### GET THE DATE - METADATA CREATED #####
# get the descriptions in a dataframe
df_date <- as.data.frame(json_list[[i]]$result$metadata_created)
# change column name
colnames(df_date)[1] <- "metadata_created"
# add id column
df_date <- tibble::rowid_to_column(df_date, "id")
# transform datatype to date
df_date$metadata_created <-  as.Date(substr(df_date$metadata_created,1,10))
##### BINDING DATAFRAMES TOGETHER #####
assign('c_results',setNames(data.frame(matrix(ncol = 6,nrow = nrow(json_list[[i]]$result))),c('id','title','description','tags','groups','date')))
# add id column
c_results$id <- unique(df_titles$id)
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- df_date[which(df_date[,'id']==j),'metadata_created']
}
# transform date column
c_results[,'date'] <- as.Date(c_results[,'date'],origin = "1970-01-01")
c_results
}
registerDoSEQ()
unregister_dopar()
registerDoParallel(cl)
# create empty list for json objects
x <- list()
# for loop to go over the urls and extend the limit each time and store the object in the json_list
# tryout with 1:5 objects - final version has to be with 1:55
json_list <- foreach(i=1:55,.packages = c('httr','jsonlite', 'tidyjson')) %dopar% {
endp_one <- "https://www.govdata.de/ckan/api/action/current_package_list_with_resources?limit=1000&offset="
endp_two <- as.character(1+1000*(i-1))
endp <- paste0(endp_one,endp_two)
resp <- GET(endp)
x <- fromJSON(content(resp, as = "text"))
}
View(json_list)
# De-register cluster
registerDoSEQ()
unregister_dopar()
# Register cluster
registerDoParallel(cl)
final_df <- foreach(i = 1:length(json_list), .combine = rbind,.packages = c('httr','jsonlite', 'tidyjson','tidyverse'))%dopar%{
##### GET THE TAGS #####
# reduce the json to the list of tags
json_tags <- json_list[[i]]$result$tags
# apply the function to the reduced json
tags_list <- lapply(json_tags, get_tags)
# transform empty values, if there are any, into NA to keep them
tags_list <- lapply(tags_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the tag names with the id of the element (needed for matching with other dataframes at the end)
df_tags <- dplyr::bind_rows(tags_list,.id = "id")
##### GET THE TITLES #######
# get the titles in a dataframe
df_titles <- as.data.frame(json_list[[i]]$result$title)
# change column name
colnames(df_titles)[1] <- "titles"
# add an id column
df_titles <- tibble::rowid_to_column(df_titles, "id")
##### GET THE GROUPS #####
# reduce the json to the list of groups
json_groups <- json_list[[i]]$result$groups
# apply the get_groups function to the reduced json
groups_list <- lapply(json_groups, get_groups)
# transform empty values, if there are any, into NA to keep them
groups_list <- lapply(groups_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the groups names with the id of the element (needed for matching with other dataframes at the end)
df_groups <- plyr::rbind.fill(lapply(groups_list, as.data.frame))
df_groups <- tibble::rowid_to_column(df_groups, "id")
##### GET THE DESCRIPTION #####
# get the descriptions in a dataframe
df_description <- as.data.frame(json_list[[i]]$result$notes)
# change column name
colnames(df_description)[1] <- "description"
# add an id column
df_description <- tibble::rowid_to_column(df_description, "id")
##### GET THE DATE - METADATA CREATED #####
# get the descriptions in a dataframe
df_date <- as.data.frame(json_list[[i]]$result$metadata_created)
# change column name
colnames(df_date)[1] <- "metadata_created"
# add id column
df_date <- tibble::rowid_to_column(df_date, "id")
# transform datatype to date
df_date$metadata_created <-  as.Date(substr(df_date$metadata_created,1,10))
##### BINDING DATAFRAMES TOGETHER #####
assign('c_results',setNames(data.frame(matrix(ncol = 6,nrow = nrow(json_list[[i]]$result))),c('id','title','description','tags','groups','date')))
# add id column
c_results$id <- unique(df_titles$id)
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- df_date[which(df_date[,'id']==j),'metadata_created']
}
# transform date column
c_results[,'date'] <- as.Date(c_results[,'date'],origin = "1970-01-01")
c_results
}
View(final_df)
final_df <- foreach(i = 1:length(json_list), .combine = rbind,.packages = c('httr','jsonlite', 'tidyjson','tidyverse'))%dopar%{
##### GET THE TAGS #####
# reduce the json to the list of tags
json_tags <- json_list[[i]]$result$tags
# apply the function to the reduced json
tags_list <- lapply(json_tags, get_tags)
# create a dataframe of the tag names with the id of the element (needed for matching with other dataframes at the end)
df_tags <- dplyr::bind_rows(tags_list,.id = "id")
##### GET THE TITLES #######
# get the titles in a dataframe
df_titles <- as.data.frame(json_list[[i]]$result$title)
# change column name
colnames(df_titles)[1] <- "titles"
# add an id column
df_titles <- tibble::rowid_to_column(df_titles, "id")
##### GET THE GROUPS #####
# reduce the json to the list of groups
json_groups <- json_list[[i]]$result$groups
# apply the get_groups function to the reduced json
groups_list <- lapply(json_groups, get_groups)
# transform empty values, if there are any, into NA to keep them
groups_list <- lapply(groups_list, lapply, function(x)ifelse(is.null(x), NA, x))
# create a dataframe of the groups names with the id of the element (needed for matching with other dataframes at the end)
df_groups <- plyr::rbind.fill(lapply(groups_list, as.data.frame))
df_groups <- tibble::rowid_to_column(df_groups, "id")
##### GET THE DESCRIPTION #####
# get the descriptions in a dataframe
df_description <- as.data.frame(json_list[[i]]$result$notes)
# change column name
colnames(df_description)[1] <- "description"
# add an id column
df_description <- tibble::rowid_to_column(df_description, "id")
##### GET THE DATE - METADATA CREATED #####
# get the descriptions in a dataframe
df_date <- as.data.frame(json_list[[i]]$result$metadata_created)
# change column name
colnames(df_date)[1] <- "metadata_created"
# add id column
df_date <- tibble::rowid_to_column(df_date, "id")
# transform datatype to date
df_date$metadata_created <-  as.Date(substr(df_date$metadata_created,1,10))
##### BINDING DATAFRAMES TOGETHER #####
assign('c_results',setNames(data.frame(matrix(ncol = 6,nrow = nrow(json_list[[i]]$result))),c('id','title','description','tags','groups','date')))
# add id column
c_results$id <- unique(df_titles$id)
# add tags and groups
for(j in 1:nrow(c_results)){
c_results[j,'tags'] <- toString(df_tags[which(df_tags[,'id']==j),'my_tags'])
c_results[j,'groups'] <- toString(df_groups[which(df_groups[,'id']==j),'my_groups'])
c_results[j,'title'] <- toString(df_titles[which(df_titles[,'id']==j),'titles'])
c_results[j,'description'] <- toString(df_description[which(df_description[,'id']==j),'description'])
c_results[j,'date'] <- df_date[which(df_date[,'id']==j),'metadata_created']
}
# transform date column
c_results[,'date'] <- as.Date(c_results[,'date'],origin = "1970-01-01")
c_results
}
View(final_df)
json_tags <- json_list[[1]]$result$tags
# apply the function to the reduced json
tags_list <- lapply(json_tags, get_tags)
df_tags <- dplyr::bind_rows(tags_list,.id = "id")
View(df_tags)
glimpse(df_tags)
summarise(group_by=id, alltogether = paste(my_tags))
summarise(df_tags,group_by(id), alltogether = paste(my_tags))
summarise(df_tags,group_by(id), alltogether = paste(my_tags))
df_tags %>%
group_by(id) %>%
summarize(alltogether = paste(my_tags))
getwd()
write.csv(final_df,paste0(getwd(),"/raw_data.csv"), row.names = FALSE)
